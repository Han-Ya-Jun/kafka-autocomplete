# bash completion for Kafka                              -*- shell-script -*-

# Nice resources: wget, tarsnap

##
# Copyright 2017 Landoop, LTD
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

shopt -s extglob

_kafka-topics-configs()
{
    local cur prev configs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    configs="cleanup.policy= \
             compression.type= \
             delete.retention.ms= \
             file.delete.delay.ms= \
             flush.messages= \
             flush.ms= \
             follower.replication.throttled= \
             index.interval.bytes= \
             leader.replication.throttled.replicas= \
             max.message.bytes= \
             message.format.version= \
             message.timestamp.difference.max.ms= \
             message.timestamp.type= \
             min.cleanable.dirty.ratio= \
             min.compaction.lag.ms= \
             min.insync.replicas= \
             preallocate= \
             retention.bytes= \
             retention.ms= \
             segment.bytes= \
             segment.index.bytes= \
             segment.jitter.ms= \
             segment.ms= \
             unclean.leader.election.enable="

    COMPREPLY=( $(compgen -W "${configs}" -- ${cur}) )
    compopt -o nospace
    return 0
}

_kafka-topics-delete-configs()
{
    local cur prev configs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    configs="cleanup.policy \
             compression.type \
             delete.retention.ms \
             file.delete.delay.ms \
             flush.messages \
             flush.ms \
             follower.replication.throttled \
             index.interval.bytes \
             leader.replication.throttled.replicas \
             max.message.bytes \
             message.format.version \
             message.timestamp.difference.max.ms \
             message.timestamp.type \
             min.cleanable.dirty.ratio \
             min.compaction.lag.ms \
             min.insync.replicas \
             preallocate \
             retention.bytes \
             retention.ms \
             segment.bytes \
             segment.index.bytes \
             segment.jitter.ms \
             segment.ms \
             unclean.leader.election.enable"

    COMPREPLY=( $(compgen -W "${configs}" -- ${cur}) )
    return 0
}

_kafka-topics() {
    local cur prev opts wotherarg allopts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    wotherarg="--config --delete-config --partitions --replica-assignment \
               --replication-factor --topic --zookeeper"
    opts="--alter --create --delete --describe --disable-rack-aware --force \
          --help --if-not-exits --list --topics-with-overrides \
          --unavailable-partitions --under-replicated-partitions"


    allopts="$wotherarg $opts"

    case "$prev" in
	--config)
            _kafka-topics-configs
            return 0
            ;;
	--delete-config)
            _kafka-topics-delete-configs
            return 0
            ;;
    esac

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${allopts}" -- ${cur}) )
        return 0
    fi
}


_consumer-configs()
{
    local cur prev configs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    configs="bootstrap.servers= \
             key.deserializer= \
             value.deserializer= \
	     fetch.min.bytes= \
	     group.id= \
	     heartbeat.interval.ms= \
	     max.partition.fetch.bytes= \
             session.timeout.ms= \
             ssl.key.password= \
             ssl.keystore.location= \
             ssl.keystore.password= \
             ssl.truststore.location= \
             ssl.truststore.password= \
             auto.offset.reset= \
             connections.max.idle.ms= \
             enable.auto.commit= \
             exclude.internal.topics= \
             fetch.max.bytes= \
             max.poll.interval.ms= \
             max.poll.records= \
             partition.assignment.strategy= \
             receive.buffer.bytes= \
             request.timeout.ms= \
             sasl.jaas.config= \
             sasl.kerberos.service.name= \
             sasl.mechanism= \
             security.protocol= \
             send.buffer.bytes= \
             ssl.enabled.protocols= \
             ssl.keystore.type= \
             ssl.protocol= \
             ssl.provider= \
             ssl.truststore.type= \
             auto.commit.interval.ms= \
             check.crcs= \
             client.id= \
             fetch.max.wait.ms= \
             interceptor.classes= \
             metadata.max.age.ms= \
             metric.reporters= \
             metrics.num.samples= \
             metrics.recording.level= \
             metrics.sample.window.ms= \
             reconnect.backoff.ms= \
             retry.backoff.ms= \
             sasl.kerberos.kinit.cmd= \
             sasl.kerberos.min.time.before.relogin= \
             sasl.kerberos.ticket.renew.jitter= \
             sasl.kerberos.ticket.renew.window.factor= \
             ssl.cipher.suites= \
             ssl.endpoint.identification.algorithm= \
             ssl.keymanager.algorithm= \
             ssl.secure.random.implementation= \
             ssl.trustmanager.algorithm="

    COMPREPLY=( $(compgen -W "${configs}" -- ${cur}) )
    compopt -o nospace
    return 0
}


_kafka-console-consumer() {
    local cur prev opts wotherarg allopts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    wotherarg="--blacklist --bootstrap-server --consumer-property --formatter \
               --key-deserializer --max-messages --offset --partition \
               --property --timeout-ms --topic --value-deserializer \
               --whitelist --zookeeper"


    wfileargs="--consumer.config"
    wdirargs="--metrics-dir"
    opts="--csv-reporter-enabled --delete-consumer-offsets \
          --enable-systest-events --from-beginning --new-consumer \
          --skip-message-on-error"


    allopts="$wotherarg $opts $wfileargs $wdirargs"

    case "$prev" in
	# @($wfileargs))
        #     _filedir
        #     return 0
        #     ;;
	# @($wdirargs))
        #     _filedir -d
        #     return 0
        #     ;;
	--consumer-property)
            _consumer-configs
            return 0
            ;;
    esac

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${allopts}" -- ${cur}) )
        return 0
    fi
}

complete -F _kafka-topics kafka-topics
complete -F _kafka-console-consumer kafka-console-consumer
